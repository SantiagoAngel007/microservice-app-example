name: CI/CD Microservice Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
      - dev
  pull_request:
    branches:
      - main
      - master
      - develop
      - dev

jobs:
  # 1. Compilación y pruebas de cada módulo
  build-and-test:
    name: Build & Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, auth-api, users-api, todos-api, log-message-processor]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # FRONTEND (Node 8.17.0)
      - name: Setup Node for Frontend
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '8.17.0'

      - name: Build Frontend
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm install
          npm run build

      # AUTH API (Go 1.18)
      - name: Setup Go for Auth API
        if: matrix.service == 'auth-api'
        uses: actions/setup-go@v4
        with:
          go-version: '1.18'

      - name: Build Auth API
        if: matrix.service == 'auth-api'
        run: |
          cd auth-api
          go mod tidy
          go build -o auth-api
          echo "Auth API built successfully"

      # USERS API (Java 8 con Maven 3.8.7)
      - name: Setup Java for Users API
        if: matrix.service == 'users-api'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build Users API
        if: matrix.service == 'users-api'
        run: |
          cd users-api
          ./mvnw clean package -DskipTests
          echo "Users API built successfully"

      # TODOS API (Node 18-alpine)
      - name: Setup Node for Todos API
        if: matrix.service == 'todos-api'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build Todos API
        if: matrix.service == 'todos-api'
        run: |
          cd todos-api
          npm install
          echo "Todos API built successfully"

      # LOG MESSAGE PROCESSOR (Python 3.11-alpine)
      - name: Setup Python for Log Message Processor
        if: matrix.service == 'log-message-processor'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Log Message Processor
        if: matrix.service == 'log-message-processor'
        run: |
          cd log-message-processor
          pip install -r requirements.txt
          echo "Log Message Processor built successfully"

  # 2. Construcción y publicación de imágenes Docker
  docker-build-and-push:
    name: Build & Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Images
        run: |
          # Frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

          # Auth API
          docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-api:${{ github.sha }} ./auth-api
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-api:${{ github.sha }}

          # Users API
          docker build -t ${{ secrets.DOCKER_USERNAME }}/users-api:${{ github.sha }} ./users-api
          docker push ${{ secrets.DOCKER_USERNAME }}/users-api:${{ github.sha }}

          # Todos API
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todos-api:${{ github.sha }} ./todos-api
          docker push ${{ secrets.DOCKER_USERNAME }}/todos-api:${{ github.sha }}

          # Log Message Processor
          docker build -t ${{ secrets.DOCKER_USERNAME }}/log-message-processor:${{ github.sha }} ./log-message-processor
          docker push ${{ secrets.DOCKER_USERNAME }}/log-message-processor:${{ github.sha }}

  # 3. Despliegue local con docker-compose
  compose-up:
    name: Deploy (docker-compose)
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          docker-compose down || true
          docker-compose up -d --build
          echo "Microservice stack is up and running!"
