name: CI/CD Microservice Pipeline

on:
  push:
    branches:
      - master
      - main
      - develop
      - dev
  pull_request:
    branches:
      - master
      - main
      - develop
      - dev

jobs:

  # Job para compilar / testear todos los servicios
  build-and-test:
    name: Build & Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [users-api, auth-api, todos-api, log-message-processor, frontend]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up service specifics ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          # (Aquí podrías instalar dependencias generales si lo necesita)
      
      - name: Build & test Java service (Users API)
        if: matrix.service == 'users-api'
        run: |
          cd users-api
          ./mvnw clean test

      - name: Build & test Go service (Auth API)
        if: matrix.service == 'auth-api'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
        run: |
          cd auth-api
          go test ./...

      - name: Build & test Node service (Todos API)
        if: matrix.service == 'todos-api'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
        run: |
          cd todos-api
          npm install
          npm test

      - name: Build & test Python service (Log Message Processor)
        if: matrix.service == 'log-message-processor'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        run: |
          cd log-message-processor
          pip install -r requirements.txt
          pytest

      - name: Build & test Frontend (Vue)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
        run: |
          cd frontend
          npm install
          npm run lint
          npm run test:unit   # o el script que uses

  # Job para construir imágenes Docker y hacer push
  docker-build-and-push:
    name: Build & Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}   # e.g. “docker.io” o tu registry
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Users API image
        run: |
          cd users-api
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/users-api:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/users-api:${{ github.sha }}

      - name: Build & Push Auth API image
        run: |
          cd auth-api
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/auth-api:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/auth-api:${{ github.sha }}

      - name: Build & Push Todos API image
        run: |
          cd todos-api
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/todos-api:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/todos-api:${{ github.sha }}

      - name: Build & Push Log Message Processor image
        run: |
          cd log-message-processor
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/log-message-processor:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/log-message-processor:${{ github.sha }}

      - name: Build & Push Frontend image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/frontend:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/frontend:${{ github.sha }}

  # (Opcional) Job de despliegue
  deploy:
    name: Deploy to Staging
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Aquí pondrías los pasos para desplegar:
      # Por ejemplo: acceder a un servidor, usar kubectl para desplegar en Kubernetes, o Terraform/Ansible
      # En este ejemplo sencillo lo dejo como comentario:

      - name: Deploy services
        run: |
          echo "Aquí se hace el despliegue de las imágenes al entorno de staging"
          # Ejemplo:
          # kubectl set image deployment/users-api users-api=${{ secrets.DOCKER_REGISTRY }}/users-api:${{ github.sha }}
          # kubectl set image deployment/auth-api auth-api=${{ secrets.DOCKER_REGISTRY }}/auth-api:${{ github.sha }}
          # etc...

      - name: Notify / Slack / etc
        if: ${{ success() }}
        run: |
          echo "Despliegue realizado correctamente"

